```python
import numpy as np

def heuristics_v2(distance_matrix, demands):
    capacity = np.sum(demands)
    n_nodes = len(demands)

    # Mask the diagonal to prevent self-loops and depot connections
    mask = np.eye(n_nodes, dtype=bool)
    distance_matrix[mask] = -np.inf

    # Calculate the demand difference matrix
    demand_diff = np.subtract.outer(demands, demands)
    demand_diff[mask | (demand_diff == 0)] = -np.inf

    # Scale the demand difference by the vehicle capacity
    scaled_demand_diff = demand_diff / (capacity + 1e-10)

    # Calculate inverse distance to prioritize shorter routes
    epsilon = 1e-10
    inverse_distance = 1.0 / (distance_matrix + epsilon)

    # Combine distance and demand difference for heuristic values
    heuristic_values = inverse_distance + scaled_demand_diff

    # Avoid overcapacity by setting heuristic to -inf where the sum exceeds capacity
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != 0 and j != 0:
                cumulative_demand = np.sum(demands[:i]) + demands[j]
                if cumulative_demand > capacity:
                    heuristic_values[i, j] = -np.inf

    return heuristic_values
```
