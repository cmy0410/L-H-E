```python
import numpy as np

def heuristics_v2(distance_matrix, demands):
    capacity = np.sum(demands)
    n_nodes = len(demands)
    
    # Avoid division by zero by adding a small constant (epsilon)
    epsilon = 1e-10
    
    # Compute the inverse distance matrix
    inverse_distance = 1.0 / (distance_matrix + epsilon)
    
    # Normalize demands by the vehicle capacity
    normalized_demands = demands / capacity
    
    # Compute the outer product of normalized demands subtracted by identity matrix
    demand_diff = np.subtract.outer(normalized_demands, normalized_demands) - np.eye(n_nodes)
    
    # Set diagonal to -inf to avoid self-loops
    np.fill_diagonal(demand_diff, -np.inf)
    
    # Initialize heuristics matrix with a combination of inverse distance and demand difference
    heuristic_values = inverse_distance + demand_diff
    
    # Penalize edges where the combined demand exceeds the vehicle capacity
    heuristic_values[demand_diff > 1] = -np.inf
    
    # Set self-loops and depot connections to -inf
    heuristic_values[:, 0] = -np.inf
    heuristic_values[0, :] = -np.inf
    
    return heuristic_values
```
