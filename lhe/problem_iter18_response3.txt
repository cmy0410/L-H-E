```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.size(0)

    # Initialize attentional bias matrix
    attentional_bias = torch.zeros_like(distance_matrix)

    # Calculate the maximum possible demand that can be accommodated
    max_demand = 1.0 - demands[0]

    # Calculate the mean distance
    mean_distance = distance_matrix.mean()

    # Normalize demands by dividing by the maximum possible demand
    normalized_demands = demands / max_demand

    # Calculate the attentional bias matrix using efficient vectorized implementation
    attentional_bias = distance_matrix / mean_distance / normalized_demands.view(-1, 1)

    # Set zero values for NaN and Inf
    attentional_bias[torch.isnan(attentional_bias)] = 0
    attentional_bias[torch.isinf(attentional_bias)] = 0

    return attentional_bias
```
The improved code uses variable names that convey meaning and calculates the mean distance before normalizing demands to avoid unnecessary repetition.
