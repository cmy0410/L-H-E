```python
import numpy as np

def heuristics_v2(distance_matrix, demands):
    n = distance_matrix.shape[0]

    # Initialize attentional bias matrix
    attentional_bias = np.zeros_like(distance_matrix)

    # Calculate the maximum possible demand that can be accommodated
    max_demand = 1.0 - demands[0]

    # Calculate the mean distance
    mean_distance = np.mean(distance_matrix)

    # Calculate the attentional bias matrix using efficient vectorized implementation
    attentional_bias = distance_matrix / mean_distance / demands[:, np.newaxis]

    # Set zero values for NaN and Inf
    attentional_bias[np.isnan(attentional_bias)] = 0
    attentional_bias[np.isinf(attentional_bias)] = 0

    return attentional_bias
```
The `heuristics_v2` function takes a distance matrix (numpy.ndarray) and a vector of customer demands (numpy.ndarray), and returns the attentional bias matrix. It follows the improvements mentioned in the reflection.
