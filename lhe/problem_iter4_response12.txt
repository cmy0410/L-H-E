```python
import torch

def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    """
    Calculate a heuristic score for each edge in the CVRP graph.
    
    The heuristic score is based on the normalized distance and the ratio of the remaining capacity
    to the total demand of the nodes that the edge connects to. Edges connecting to nodes with a 
    negative demand (drop-off nodes) are penalized.
    
    Args:
        distance_matrix (torch.Tensor): Normalized distance matrix where the depot node is at index 0.
        demands (torch.Tensor): Normalized customer demands, also including the depot node.
        
    Returns:
        torch.Tensor: A tensor of the same shape as the distance matrix, containing heuristic scores.
    """
    # Number of nodes (incl. depot)
    n = demands.shape[0]
    
    # Calculate the remaining capacity for each node
    remaining_capacity = torch.zeros(n, n).to(distance_matrix.device)
    remaining_capacity[1:, 0] = demands[1:].sum(dim=0)
    for i in range(1, n):
        remaining_capacity[i, 1:] = remaining_capacity[i - 1, 1:] - demands[i]
    
    # Calculate the heuristic score for each edge
    # Penalize edges connecting to drop-off nodes (negative demand)
    heuristic_scores = distance_matrix
    heuristic_scores[demands < 0] = -1  # Penalty for drop-off nodes
    
    # Bonus based on the ratio of remaining capacity to the total demand
    capacity_bonus = remaining_capacity.unsqueeze(-1) / (demands.unsqueeze(-1) + 1e-6)
    heuristic_scores = heuristic_scores + capacity_bonus
    
    return heuristic_scores
```
