```python
def heuristics_v2(distance_matrix: torch.Tensor, demands: torch.Tensor) -> torch.Tensor:
    n = distance_matrix.size(0)

    # Normalize demands
    max_demand = 1.0 - demands[0]
    demands_norm = demands / torch.sum(demands)

    # Calculate the mean distance
    mean_distance = torch.mean(distance_matrix)

    # Calculate the attentional bias matrix using efficient vectorized implementation
    attentional_bias = distance_matrix / mean_distance / demands_norm.view(-1, 1)

    # Set zero values for NaN and Inf
    attentional_bias[torch.isnan(attentional_bias) | torch.isinf(attentional_bias)] = 0

    return attentional_bias
```
