```python
import numpy as np

def heuristics_v2(distance_matrix, demands):
    n_nodes = len(demands)
    capacity = np.sum(demands)
    heuristic_matrix = np.zeros((n_nodes, n_nodes))

    # Normalize demands
    normalized_demands = demands / capacity

    # Create a matrix of demand differences, penalizing equal demands
    demand_diff = np.subtract.outer(normalized_demands, normalized_demands)
    np.fill_diagonal(demand_diff, -np.inf)

    # Penalize demand differences that exceed vehicle capacity
    demand_diff[demand_diff > 1] = -np.inf

    # Inverse distance as a basic utility, avoiding division by zero
    epsilon = 1e-10
    inverse_distance = 1 / (distance_matrix + epsilon)

    # Calculate heuristic values: inverse distance adjusted by demand feasibility
    heuristic_values = inverse_distance - demand_diff

    # Set heuristic values for self-loops to negative infinity
    np.fill_diagonal(heuristic_matrix, -np.inf)

    # Set heuristic values to visit the depot again to -inf
    heuristic_matrix[:, 0] = -np.inf

    return heuristic_matrix
```
